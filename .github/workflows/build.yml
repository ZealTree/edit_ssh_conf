name: Build SSH Config Binaries

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.10']
        os_suffix: [windows, linux]
        exclude:
          - os: windows-latest
            os_suffix: linux
          - os: ubuntu-latest
            os_suffix: windows

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Read version
        id: version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libegl1 libopengl0 libgl1-mesa-dev upx-ucl

      - name: Install UPX (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          $UPX_VERSION = "4.2.4"
          $UPX_URL = "https://github.com/upx/upx/releases/download/v$UPX_VERSION/upx-$UPX_VERSION-win64.zip"
          $UPX_DIR = "C:\upx"
          Invoke-WebRequest -Uri $UPX_URL -OutFile "upx.zip"
          Expand-Archive -Path "upx.zip" -DestinationPath $UPX_DIR
          $env:PATH += ";$UPX_DIR\upx-$UPX_VERSION-win64"
          echo "PATH=$env:PATH" >> $env:GITHUB_ENV
          & "$UPX_DIR\upx-$UPX_VERSION-win64\upx.exe" --version
        shell: powershell

      - name: Build with PyInstaller
        run: |
          pyinstaller --name ssh_config_${{ matrix.os_suffix }} \
                      --onefile \
                      --icon assets/icon.ico \
                      --add-data "assets/icon.ico${{ matrix.os == 'windows-latest' && ';' || ':' }}assets" \
                      --add-data "assets/icon.png${{ matrix.os == 'windows-latest' && ';' || ':' }}assets" \
                      --add-data "version.txt${{ matrix.os == 'windows-latest' && ';' || ':' }}." \
                      --noconfirm \
                      --noconsole \
                      --upx-dir ${{ matrix.os == 'windows-latest' && 'C:\upx\upx-4.2.4-win64' || '/usr/bin' }} \
                      ssh_config.py
          if [ ! -f dist/ssh_config_${{ matrix.os_suffix }}${{ matrix.os == 'windows-latest' && '.exe' || '' }} ]; then
            echo "Build failed: Binary not found!"
            exit 1
          fi
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ssh_config_${{ matrix.os_suffix }}
          path: dist/ssh_config_${{ matrix.os_suffix }}*

      - name: Check if release exists
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: check_release
        run: |
          TAG="v${{ env.VERSION }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Release with tag $TAG already exists, skipping release creation"
            echo "release_exists=true" >> $GITHUB_ENV
          else
            echo "release_exists=false" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && env.release_exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          files: dist/ssh_config_${{ matrix.os_suffix }}*
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body: Automated release for SSH Config Editor v${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.os == 'windows-latest'
        run: |
          git pull --rebase origin main
          python bump_version.py
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add version.txt
          git commit -m "Bump version to $(cat version.txt)"
          git push
        shell: bash